/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Expenses as PrismaExpenses } from "@prisma/client";

export class ExpensesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ExpensesCountArgs, "select">): Promise<number> {
    return this.prisma.expenses.count(args);
  }

  async expensesItems(
    args: Prisma.ExpensesFindManyArgs
  ): Promise<PrismaExpenses[]> {
    return this.prisma.expenses.findMany(args);
  }
  async expenses(
    args: Prisma.ExpensesFindUniqueArgs
  ): Promise<PrismaExpenses | null> {
    return this.prisma.expenses.findUnique(args);
  }
  async createExpenses(
    args: Prisma.ExpensesCreateArgs
  ): Promise<PrismaExpenses> {
    return this.prisma.expenses.create(args);
  }
  async updateExpenses(
    args: Prisma.ExpensesUpdateArgs
  ): Promise<PrismaExpenses> {
    return this.prisma.expenses.update(args);
  }
  async deleteExpenses(
    args: Prisma.ExpensesDeleteArgs
  ): Promise<PrismaExpenses> {
    return this.prisma.expenses.delete(args);
  }
}
