/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DriverCarAssignment } from "./DriverCarAssignment";
import { DriverCarAssignmentCountArgs } from "./DriverCarAssignmentCountArgs";
import { DriverCarAssignmentFindManyArgs } from "./DriverCarAssignmentFindManyArgs";
import { DriverCarAssignmentFindUniqueArgs } from "./DriverCarAssignmentFindUniqueArgs";
import { DeleteDriverCarAssignmentArgs } from "./DeleteDriverCarAssignmentArgs";
import { DriverCarAssignmentService } from "../driverCarAssignment.service";
@graphql.Resolver(() => DriverCarAssignment)
export class DriverCarAssignmentResolverBase {
  constructor(protected readonly service: DriverCarAssignmentService) {}

  async _driverCarAssignmentsMeta(
    @graphql.Args() args: DriverCarAssignmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DriverCarAssignment])
  async driverCarAssignments(
    @graphql.Args() args: DriverCarAssignmentFindManyArgs
  ): Promise<DriverCarAssignment[]> {
    return this.service.driverCarAssignments(args);
  }

  @graphql.Query(() => DriverCarAssignment, { nullable: true })
  async driverCarAssignment(
    @graphql.Args() args: DriverCarAssignmentFindUniqueArgs
  ): Promise<DriverCarAssignment | null> {
    const result = await this.service.driverCarAssignment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DriverCarAssignment)
  async deleteDriverCarAssignment(
    @graphql.Args() args: DeleteDriverCarAssignmentArgs
  ): Promise<DriverCarAssignment | null> {
    try {
      return await this.service.deleteDriverCarAssignment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
