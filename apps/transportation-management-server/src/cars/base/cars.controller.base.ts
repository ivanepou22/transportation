/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CarsService } from "../cars.service";
import { CarsCreateInput } from "./CarsCreateInput";
import { Cars } from "./Cars";
import { CarsFindManyArgs } from "./CarsFindManyArgs";
import { CarsWhereUniqueInput } from "./CarsWhereUniqueInput";
import { CarsUpdateInput } from "./CarsUpdateInput";

export class CarsControllerBase {
  constructor(protected readonly service: CarsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cars })
  async createCars(@common.Body() data: CarsCreateInput): Promise<Cars> {
    return await this.service.createCars({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cars] })
  @ApiNestedQuery(CarsFindManyArgs)
  async carsItems(@common.Req() request: Request): Promise<Cars[]> {
    const args = plainToClass(CarsFindManyArgs, request.query);
    return this.service.carsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cars })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cars(
    @common.Param() params: CarsWhereUniqueInput
  ): Promise<Cars | null> {
    const result = await this.service.cars({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cars })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCars(
    @common.Param() params: CarsWhereUniqueInput,
    @common.Body() data: CarsUpdateInput
  ): Promise<Cars | null> {
    try {
      return await this.service.updateCars({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cars })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCars(
    @common.Param() params: CarsWhereUniqueInput
  ): Promise<Cars | null> {
    try {
      return await this.service.deleteCars({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
