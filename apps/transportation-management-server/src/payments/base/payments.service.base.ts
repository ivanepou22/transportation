/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Payments as PrismaPayments } from "@prisma/client";

export class PaymentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PaymentsCountArgs, "select">): Promise<number> {
    return this.prisma.payments.count(args);
  }

  async paymentsItems(
    args: Prisma.PaymentsFindManyArgs
  ): Promise<PrismaPayments[]> {
    return this.prisma.payments.findMany(args);
  }
  async payments(
    args: Prisma.PaymentsFindUniqueArgs
  ): Promise<PrismaPayments | null> {
    return this.prisma.payments.findUnique(args);
  }
  async createPayments(
    args: Prisma.PaymentsCreateArgs
  ): Promise<PrismaPayments> {
    return this.prisma.payments.create(args);
  }
  async updatePayments(
    args: Prisma.PaymentsUpdateArgs
  ): Promise<PrismaPayments> {
    return this.prisma.payments.update(args);
  }
  async deletePayments(
    args: Prisma.PaymentsDeleteArgs
  ): Promise<PrismaPayments> {
    return this.prisma.payments.delete(args);
  }
}
