/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentsService } from "../payments.service";
import { PaymentsCreateInput } from "./PaymentsCreateInput";
import { Payments } from "./Payments";
import { PaymentsFindManyArgs } from "./PaymentsFindManyArgs";
import { PaymentsWhereUniqueInput } from "./PaymentsWhereUniqueInput";
import { PaymentsUpdateInput } from "./PaymentsUpdateInput";

export class PaymentsControllerBase {
  constructor(protected readonly service: PaymentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Payments })
  async createPayments(
    @common.Body() data: PaymentsCreateInput
  ): Promise<Payments> {
    return await this.service.createPayments({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Payments] })
  @ApiNestedQuery(PaymentsFindManyArgs)
  async paymentsItems(@common.Req() request: Request): Promise<Payments[]> {
    const args = plainToClass(PaymentsFindManyArgs, request.query);
    return this.service.paymentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Payments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async payments(
    @common.Param() params: PaymentsWhereUniqueInput
  ): Promise<Payments | null> {
    const result = await this.service.payments({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Payments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePayments(
    @common.Param() params: PaymentsWhereUniqueInput,
    @common.Body() data: PaymentsUpdateInput
  ): Promise<Payments | null> {
    try {
      return await this.service.updatePayments({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Payments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePayments(
    @common.Param() params: PaymentsWhereUniqueInput
  ): Promise<Payments | null> {
    try {
      return await this.service.deletePayments({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
