/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Drivers } from "./Drivers";
import { DriversCountArgs } from "./DriversCountArgs";
import { DriversFindManyArgs } from "./DriversFindManyArgs";
import { DriversFindUniqueArgs } from "./DriversFindUniqueArgs";
import { CreateDriversArgs } from "./CreateDriversArgs";
import { UpdateDriversArgs } from "./UpdateDriversArgs";
import { DeleteDriversArgs } from "./DeleteDriversArgs";
import { DriversService } from "../drivers.service";
@graphql.Resolver(() => Drivers)
export class DriversResolverBase {
  constructor(protected readonly service: DriversService) {}

  async _driversItemsMeta(
    @graphql.Args() args: DriversCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Drivers])
  async driversItems(
    @graphql.Args() args: DriversFindManyArgs
  ): Promise<Drivers[]> {
    return this.service.driversItems(args);
  }

  @graphql.Query(() => Drivers, { nullable: true })
  async drivers(
    @graphql.Args() args: DriversFindUniqueArgs
  ): Promise<Drivers | null> {
    const result = await this.service.drivers(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Drivers)
  async createDrivers(
    @graphql.Args() args: CreateDriversArgs
  ): Promise<Drivers> {
    return await this.service.createDrivers({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Drivers)
  async updateDrivers(
    @graphql.Args() args: UpdateDriversArgs
  ): Promise<Drivers | null> {
    try {
      return await this.service.updateDrivers({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Drivers)
  async deleteDrivers(
    @graphql.Args() args: DeleteDriversArgs
  ): Promise<Drivers | null> {
    try {
      return await this.service.deleteDrivers(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
