/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DriversService } from "../drivers.service";
import { DriversCreateInput } from "./DriversCreateInput";
import { Drivers } from "./Drivers";
import { DriversFindManyArgs } from "./DriversFindManyArgs";
import { DriversWhereUniqueInput } from "./DriversWhereUniqueInput";
import { DriversUpdateInput } from "./DriversUpdateInput";

export class DriversControllerBase {
  constructor(protected readonly service: DriversService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Drivers })
  async createDrivers(
    @common.Body() data: DriversCreateInput
  ): Promise<Drivers> {
    return await this.service.createDrivers({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        name: true,
        licenseNumber: true,
        address: true,
        contactInfo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Drivers] })
  @ApiNestedQuery(DriversFindManyArgs)
  async driversItems(@common.Req() request: Request): Promise<Drivers[]> {
    const args = plainToClass(DriversFindManyArgs, request.query);
    return this.service.driversItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        name: true,
        licenseNumber: true,
        address: true,
        contactInfo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Drivers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async drivers(
    @common.Param() params: DriversWhereUniqueInput
  ): Promise<Drivers | null> {
    const result = await this.service.drivers({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        name: true,
        licenseNumber: true,
        address: true,
        contactInfo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Drivers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDrivers(
    @common.Param() params: DriversWhereUniqueInput,
    @common.Body() data: DriversUpdateInput
  ): Promise<Drivers | null> {
    try {
      return await this.service.updateDrivers({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
          name: true,
          licenseNumber: true,
          address: true,
          contactInfo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Drivers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDrivers(
    @common.Param() params: DriversWhereUniqueInput
  ): Promise<Drivers | null> {
    try {
      return await this.service.deleteDrivers({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
          name: true,
          licenseNumber: true,
          address: true,
          contactInfo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
