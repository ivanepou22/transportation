/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Drivers as PrismaDrivers } from "@prisma/client";

export class DriversServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DriversCountArgs, "select">): Promise<number> {
    return this.prisma.drivers.count(args);
  }

  async driversItems(
    args: Prisma.DriversFindManyArgs
  ): Promise<PrismaDrivers[]> {
    return this.prisma.drivers.findMany(args);
  }
  async drivers(
    args: Prisma.DriversFindUniqueArgs
  ): Promise<PrismaDrivers | null> {
    return this.prisma.drivers.findUnique(args);
  }
  async createDrivers(args: Prisma.DriversCreateArgs): Promise<PrismaDrivers> {
    return this.prisma.drivers.create(args);
  }
  async updateDrivers(args: Prisma.DriversUpdateArgs): Promise<PrismaDrivers> {
    return this.prisma.drivers.update(args);
  }
  async deleteDrivers(args: Prisma.DriversDeleteArgs): Promise<PrismaDrivers> {
    return this.prisma.drivers.delete(args);
  }
}
