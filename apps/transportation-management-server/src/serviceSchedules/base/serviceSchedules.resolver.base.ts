/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceSchedules } from "./ServiceSchedules";
import { ServiceSchedulesCountArgs } from "./ServiceSchedulesCountArgs";
import { ServiceSchedulesFindManyArgs } from "./ServiceSchedulesFindManyArgs";
import { ServiceSchedulesFindUniqueArgs } from "./ServiceSchedulesFindUniqueArgs";
import { DeleteServiceSchedulesArgs } from "./DeleteServiceSchedulesArgs";
import { ServiceSchedulesService } from "../serviceSchedules.service";
@graphql.Resolver(() => ServiceSchedules)
export class ServiceSchedulesResolverBase {
  constructor(protected readonly service: ServiceSchedulesService) {}

  async _serviceSchedulesItemsMeta(
    @graphql.Args() args: ServiceSchedulesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceSchedules])
  async serviceSchedulesItems(
    @graphql.Args() args: ServiceSchedulesFindManyArgs
  ): Promise<ServiceSchedules[]> {
    return this.service.serviceSchedulesItems(args);
  }

  @graphql.Query(() => ServiceSchedules, { nullable: true })
  async serviceSchedules(
    @graphql.Args() args: ServiceSchedulesFindUniqueArgs
  ): Promise<ServiceSchedules | null> {
    const result = await this.service.serviceSchedules(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceSchedules)
  async deleteServiceSchedules(
    @graphql.Args() args: DeleteServiceSchedulesArgs
  ): Promise<ServiceSchedules | null> {
    try {
      return await this.service.deleteServiceSchedules(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
