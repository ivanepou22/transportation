/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceSchedulesService } from "../serviceSchedules.service";
import { ServiceSchedulesCreateInput } from "./ServiceSchedulesCreateInput";
import { ServiceSchedules } from "./ServiceSchedules";
import { ServiceSchedulesFindManyArgs } from "./ServiceSchedulesFindManyArgs";
import { ServiceSchedulesWhereUniqueInput } from "./ServiceSchedulesWhereUniqueInput";
import { ServiceSchedulesUpdateInput } from "./ServiceSchedulesUpdateInput";

export class ServiceSchedulesControllerBase {
  constructor(protected readonly service: ServiceSchedulesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceSchedules })
  async createServiceSchedules(
    @common.Body() data: ServiceSchedulesCreateInput
  ): Promise<ServiceSchedules> {
    return await this.service.createServiceSchedules({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceSchedules] })
  @ApiNestedQuery(ServiceSchedulesFindManyArgs)
  async serviceSchedulesItems(
    @common.Req() request: Request
  ): Promise<ServiceSchedules[]> {
    const args = plainToClass(ServiceSchedulesFindManyArgs, request.query);
    return this.service.serviceSchedulesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceSchedules })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceSchedules(
    @common.Param() params: ServiceSchedulesWhereUniqueInput
  ): Promise<ServiceSchedules | null> {
    const result = await this.service.serviceSchedules({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceSchedules })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceSchedules(
    @common.Param() params: ServiceSchedulesWhereUniqueInput,
    @common.Body() data: ServiceSchedulesUpdateInput
  ): Promise<ServiceSchedules | null> {
    try {
      return await this.service.updateServiceSchedules({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceSchedules })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceSchedules(
    @common.Param() params: ServiceSchedulesWhereUniqueInput
  ): Promise<ServiceSchedules | null> {
    try {
      return await this.service.deleteServiceSchedules({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
